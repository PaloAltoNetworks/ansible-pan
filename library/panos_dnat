#!/usr/bin/env python

# Copyright (c) 2014, Palo Alto Networks <techbizdev@paloaltonetworks.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DOCUMENTATION = '''
---
module: panos_dnat
short_description: create a destination nat rule
description:
    - Create a destination nat rule
notes:
    - Superseded, use panos_nat module
author: 
    - Palo Alto Networks 
    - Luigi Mori (jtschichold)
version_added: "0.0"
requirements:
    - pan-python
options:
    ip_address:
        description:
            - IP address (or hostname) of PAN-OS device
        required: true
    key:
        description:
            - api key for authentication used in place of username and password
        required: false
    password:
        description:
            - password for authentication
        required: false
    username:
        description:
            - username for authentication
        required: false
        default: "admin"
    rule_name:
        description:
            - name of the SNAT rule
        required: true
    from_zone:
        description:
            - source zone
        required: true
    to_zone:
        description:
            - destination zone
        required: true
    source:
        description:
            - source address
        required: false
        default: "any"
    destination:
        description:
            - destination address
        required: false
        default: "any"
    service:
        description:
            - service
        required: false
        default: "any"
    translated_address:
        description:
            - translated address
        required: false
        default: None
    translated_port:
        description:
            - translated port
        required: false
        default: None
    commit:
        description:
            - commit if changed
        required: false
        default: true
'''

EXAMPLES = '''
# Create a destination nat rule dnat-ssh on 192.168.1.1
  - name: create destination nat rule for server
    panos_dnat:
      ip_address: "192.168.1.1"
      password: "admin"
      rule_name: "dnat-ssh"
      from_zone: "external"
      to_zone: "external"
      source: "any"
      destination: "{{PAVMAWSPublicIP}}"
      service: "service-tcp-22"
      translated_address: "{{ServerIP}}"
'''

import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_NAT_XPATH = "/config/devices/entry[@name='localhost.localdomain']" +\
             "/vsys/entry[@name='vsys1']/rulebase/nat/rules/entry[@name='%s']"


def nat_rule_exists(xapi, rule_name):
    xapi.get(_NAT_XPATH % rule_name)
    e = xapi.element_root.find('.//entry')
    if e is None:
        return False
    return True


def add_dnat(xapi, module, rule_name, from_zone, to_zone,
             source, destination, service,
             translated_address=None, translated_port=None):
    if translated_address is None and translated_port is None:
        module.fail_json(msg="at least one of translated_address "
                         "and translated_port should be specified")

    if nat_rule_exists(xapi, rule_name):
        return False

    exml = ["<destination-translation>"]
    if translated_address is not None:
        exml.append("<translated-address>%s</translated-address>" %
                    translated_address)
    if translated_port is not None:
        exml.append("<translated-port>%s</translated-port>" % translated_port)
    exml.append('</destination-translation>')

    exml.append("<to><member>%s</member></to>" % to_zone)

    exml.append("<from>")
    exml = exml+["<member>%s</member>" % e for e in from_zone]
    exml.append("</from>")

    exml.append("<source>")
    exml = exml+["<member>%s</member>" % e for e in source]
    exml.append("</source>")

    exml.append("<destination>")
    exml = exml+["<member>%s</member>" % e for e in destination]
    exml.append("</destination>")

    exml.append("<service>%s</service>" % service)

    exml.append("<nat-type>ipv4</nat-type>")

    exml = ''.join(exml)

    xapi.set(xpath=_NAT_XPATH % rule_name, element=exml)

    return True


def main():
    argument_spec = dict(
        ip_address=dict(default=None),
        key=dict(default=None, no_log=True),
        password=dict(default=None, no_log=True),
        username=dict(default='admin'),
        rule_name=dict(default=None),
        translated_address=dict(default=None),
        translated_port=dict(default=None),
        from_zone=dict(default=None),
        to_zone=dict(default=None),
        source=dict(default="any"),
        destination=dict(default="any"),
        service=dict(default="any"),
        commit=dict(type='bool', default=True)
    )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    key = module.params["key"]
    if not password and not key:
        module.fail_json(msg="password is required")
    username = module.params['username']

    if not key:
        args = dict(
            hostname=ip_address,
            api_username=username,
            api_password=password,
            timeout=60
        )
    else:
        args = dict(
            hostname=ip_address,
            api_key=key,
            api_username=username,
            timeout=60
        )

    xapi = pan.xapi.PanXapi(
        **args
    )

    rule_name = module.params['rule_name']
    if not rule_name:
        module.fail_json(msg='rule_name is required')
    translated_address = module.params['translated_address']
    translated_port = module.params['translated_port']
    from_zone = module.params['from_zone']
    if from_zone is None:
        module.fail_json(msg='from_zone is required')
    if type(from_zone) == str:
        from_zone = [from_zone]
    to_zone = module.params['to_zone']
    if to_zone is None:
        module.fail_json(msg='to_zone is required')
    source = module.params['source']
    if type(source) == str:
        source = [source]
    destination = module.params['destination']
    if type(destination) == str:
        destination = [destination]
    service = module.params['service']
    commit = module.params['commit']

    changed = False
    changed = add_dnat(xapi, module,
                       rule_name,
                       from_zone,
                       to_zone,
                       source,
                       destination,
                       service,
                       translated_address,
                       translated_port)

    if changed and commit:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *  # noqa

main()
