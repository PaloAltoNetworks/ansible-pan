#!/usr/bin/env python

# Copyright (c) 2014, Palo Alto Networks <techbizdev@paloaltonetworks.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DOCUMENTATION = '''
---
module: panos_awsmonitor
short_description: create an AWS monitor object
description:
    - Create an AWS monitor object
author: Palo Alto Networks - lmori
version_added: "0.0"
requirements:
    - pan-python
options:
    ip_address:
        description:
            - IP address (or hostname) of PAN-OS device
        required: true
    key:
        description:
            - api key for authentication used in place of username and password
        required: false
    password:
        description:
            - password for authentication
        required: false
    username:
        description:
            - username for authentication
        required: false
        default: "admin"
    monitor_name:
        description:
            - name of the vm information source
        required: true
    vpc_id:
        description:
            - ID of the VPC to monitor
        required: true
    source:
        description:
            - EC2 endpoint to monitor (ec2.<region>.amazonaws.com)
        required: true
    access_key:
        description:
            - access key to use
        required: true
    secret_access_key:
        description:
            - secret access key to use
        required: true
    commit:
        description:
            - commit if changed
        required: false
        default: true
'''

EXAMPLES = '''
- name: test
  panos_awsmonitor:
    ip_address: "192.168.1.1"
    password: "admin"
    monitor_name: "awsmonitor"
    vpc_id: "vpc-12345678"
    source: "ec2.eu-west-1.amazonaws.com"
    access_key: "BADACCESSKEY"
    secret_access_key: "BADSECRETACCESSKEY"
'''

import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_VMMONITOR_XPATH = "/config/devices/entry[@name='localhost.localdomain']" +\
                   "/vsys/entry[@name='vsys1']" +\
                   "/vm-info-source/entry[@name='%s']"


def vmmonitor_exists(xapi, monitor_name):
    xapi.get(_VMMONITOR_XPATH % monitor_name)
    e = xapi.element_root.find('.//entry')
    if e is None:
        return False
    return True


def add_awsmonitor(xapi, monitor_name, vpc_id, source,
                   access_key, secret_access_key):
    if vmmonitor_exists(xapi, monitor_name):
        return False

    # setup the non encrypted part of the monitor
    exml = []

    exml.append('<AWS-VPC>')
    exml.append('<vpc-id>%s</vpc-id>' % vpc_id)
    exml.append('<source>%s</source>' % source)
    exml.append('<access-key-id>%s</access-key-id>' % access_key)
    exml.append('<secret-access-key>%s</secret-access-key>' %
                secret_access_key)
    exml.append('<disabled>no</disabled>')
    exml.append('</AWS-VPC>')

    exml = ''.join(exml)
    xapi.set(xpath=_VMMONITOR_XPATH % monitor_name, element=exml)

    return True


def main():
    argument_spec = dict(
        ip_address=dict(default=None),
        password=dict(default=None, no_log=True),
        username=dict(default='admin'),
        monitor_name=dict(default=None),
        vpc_id=dict(default=None),
        source=dict(default=None),
        access_key=dict(default=None),
        secret_access_key=dict(default=None, no_log=True),
        commit=dict(type='bool', default=True)
    )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(
        hostname=ip_address,
        api_username=username,
        api_password=password
    )

    monitor_name = module.params['monitor_name']
    if not monitor_name:
        module.fail_json(msg="monitor_name is required")
    vpc_id = module.params['vpc_id']
    if not vpc_id:
        module.fail_json(msg="vpc_id is required")
    source = module.params['source']
    if not source:
        module.fail_json(msg="source is required")
    access_key = module.params['access_key']
    if not access_key:
        module.fail_json(msg="access_key is required")
    secret_access_key = module.params['secret_access_key']
    if not secret_access_key:
        module.fail_json(msg="secret_access_key is required")
    commit = module.params['commit']

    changed = add_awsmonitor(xapi, monitor_name, vpc_id,
                             source, access_key, secret_access_key)

    if changed and commit:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *  # noqa
from ansible.module_utils.ec2 import *  # noqa

main()
