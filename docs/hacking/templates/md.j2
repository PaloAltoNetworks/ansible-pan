{% if short_description %}
{% set title = module %}
{% endif %}
# @{ title }@

{% if version_added is defined -%}
_(versionadded:: @{ version_added }@)_
{% endif %}

{% if deprecated is defined -%}
## DEPRECATED

@{ deprecated | convert_symbols_to_format }@
{% endif %}

## Synopsis

{% for desc in description -%}
@{ desc | convert_symbols_to_format }@
{% endfor %}

{% if aliases is defined -%}
Aliases: @{ ','.join(aliases) }@
{% endif %}

{% if requirements %}
## Requirements (on host that executes module)

{% for req in requirements %}
- @{ req | convert_symbols_to_format }@
{% endfor %}
{% endif %}

{% if options -%}
## Options

{% set out_line = '| parameter | required | default | choices | comments |\n' %}
{% set out_line = out_line + '| --- | --- | --- | --- | --- |\n' %}
@{ out_line }@
{% for k in option_keys %}
{% set v = options[k] %}
{% set required = 'no' %}
{% set default = '' %}
{% if v.get('required', False) %}{% set required = 'yes' %}{% endif %}
{% if not v['default'] %}{% set default = '' %}{% endif %}
{% if not v['suboptions'] %}
NOT suboptions
{% set out_line = '|' + k +'|' + required + '|' + default + '|' %}
@{ out_line }@
    {% if v.get('type', 'not_bool') == 'bool' %}
| 'yes/no' |
    {% else %}
        {% if v['choices'] %}
            {% for choice in v.get('choices',[]) -%}
| @{ choice }@ |
            {% endfor -%}
        {% endif %}
    {% endif %}
    {% for desc in v.description -%}
        @{ desc | replace('\n', '\n    ') | html_ify }@
    {% endfor -%}
    {% if 'aliases' in v and v.aliases -%}
        aliases: @{ v.aliases|join(', ') }@ {%- endif %} |
    {% else %}
| @{ k }@ {% if v['version_added'] %} (added in @{v['version_added']}@){% endif %} |
| {% if v.get('required', False) %}yes{% else %}no{% endif %} |
        {% for desc in v.description -%}<div>@{ desc | replace('\n', '\n    ') | html_ify }@</div>{% endfor -%} {% if 'aliases' in v and v.aliases -%}</br>
<div style="font-size: small;">aliases: @{ v.aliases|join(', ') }@<div>{%- endif %}
</tr>
<tr>
<td colspan="5">
<table border=1 cellpadding=4>
<caption><b>Dictionary object @{ k }@</b></caption>
<tr>
<th class="head">parameter</th>
<th class="head">required</th>
<th class="head">default</th>
<th class="head">choices</th>
<th class="head">comments</th>
</tr>
{% for k2 in v['suboptions'] %}
    {% set v2 = v['suboptions'] [k2] %}
    <tr><td>@{ k2 }@<br/><div style="font-size: small;">{% if v2['version_added'] %} (added in @{v2['version_added']}@){% endif %}</div></td>
    <td>{% if v2.get('required', False) %}yes{% else %}no{% endif %}</td>
    <td>{% if v2['default'] %}@{ v2['default'] }@{% endif %}</td>
    {% if v2.get('type', 'not_bool') == 'bool' %}
    <td><ul><li>yes</li><li>no</li></ul></td>
    {% else %}
    <td>{% if v2['choices'] %}<ul>{% for choice in v2.get('choices',[]) -%}<li>@{ choice }@</li>{% endfor -%}</ul>{% endif %}</td>
    {% endif %}
    <td>{% for desc in v2.description -%}<div>@{ desc | replace('\n', '\n    ') | html_ify }@</div>{% endfor -%} {% if 'aliases' in v and v2.aliases -%}</br>
    <div style="font-size: small;">aliases: @{ v2.aliases|join(', ') }@<div>{%- endif %}
    </td></tr>
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}

{% if examples or plainexamples -%}
## Examples

{% for example in examples %}
{% if example['description'] %}@{ example['description'] | indent(4, True) }@{% endif %}
@{ example['code'] | escape | indent(4, True) }@
{% endfor %}
{% if plainexamples %}@{ plainexamples | indent(4, True) }@{% endif %}
{% endif %}

{% if returndocs -%}
#### Return Values

The following are the fields unique to this module:

| name | description | returned | type | sample |
| --- | --- | --- | --- | --- |
{% for entry in returndocs %}
| @{ entry }@ | @{ returndocs[entry].description }@ | @{ returndocs[entry].returned }@ | @{ returndocs[entry].type }@ | @{ returndocs[entry].sample}@ |
{% endfor %}
{% endif %}

{% if notes -%}
#### Notes

{% for note in notes %}
- @{ note | convert_symbols_to_format }@
{% endfor %}
{% endif %}

{% if not deprecated %}
{% set support = { 'core': 'This module is maintained by those with core commit privileges', 'curated': 'This module is supported mainly by the community and is curated by core committers.', 'community': 'This module is community maintained without core committer oversight.'} %}
{% set module_states = { 'preview': 'it is not guaranteed to have a backwards compatible interface', 'stableinterface': 'the maintainers for this module guarantee that no backward incompatible interface changes will be made'} %}

{% if metadata %}
{% if metadata.status %}

#### Status

{% for cur_state in  metadata.status %}
This module is flagged as **@{cur_state}@** which means that @{module_states[cur_state]}@.
{% endfor %}
{% endif %}

{% endif %}
{% endif %}
